---
format:
  html:
    keep-md: false
    css: ../gallery.css
title: Reception
album: Reception
editor: source
lightbox: auto
---

<!-- :::{.column-page  style="background-image: url('../images/white_wall_hash.webp');"} -->
![](../images/wedding_reception.png){width=67% style="margin-left: auto; margin-right: auto;display: block;" .nolightbox fig-alt='logo'}
<!-- ::: -->

<p align="center">
Please allow 15 seconds for the pictures to load.
</p>
<p align="center" style="margin-bottom: 2px;">
  사진이 나타나기까지 약 15초 정도 소요될 수 있습니다.
</p>
<p align="center" style="margin-top: 2px;">
  잠시만 기다려 주세요.
</p>



::: gallery


<h3 style="margin: 0; line-height: 1.2; text-align: center;">Bouquet Toss (부케 던지기)</h3>

<p align="center" style="margin-top: 25px;">
Click on a photo to view the animation.
</p>
<p align="center" style="margin-bottom: 25px;">
사진을 클릭하면 애니메이션이 재생됩니다.
</p>


::: column-page


```{r, results='asis', echo=FALSE, warning=FALSE, message=FALSE}
library(glue)

for (i in 0:1) {
  folder <- glue("../photos/gif{i}")
  images <- list.files(folder, pattern = "\\.jpg$", full.names = TRUE)
  if (length(images) == 0) next

  img_id <- glue("slide{i}")
  modal_id <- glue("modal{i}")
  modal_img_id <- glue("modalImg{i}")
  array_name <- glue("imagePaths{i}")
  index_var <- glue("currentIndex{i}")
  interval_var <- glue("interval{i}")

  cat(glue('
<div>
  <img id="{img_id}" src="{images[1]}" class="aligned-image nolightbox" style="cursor:pointer;" onclick="openModal{i}()">
</div>

<div id="{modal_id}" class="modal">
  <span class="modal-close" onclick="closeModal(\'{modal_id}\', \'{interval_var}\')">&times;</span>
  <img class="modal-content" id="{modal_img_id}">
</div>
'))

  js_array <- paste0('"', images, '"', collapse = ",\n")

cat(glue('
<script>
const {array_name} = [
{js_array}
];
let {index_var} = 0;
let {interval_var} = null;

function showSlide{i}() {{
  const modalImg = document.getElementById("{modal_img_id}");
  modalImg.src = {array_name}[{index_var}];
}}

function openModal{i}() {{
  const modal = document.getElementById("{modal_id}");
  modal.style.display = "block";
  document.body.style.overflow = "hidden";  // prevent background scroll
  {index_var} = 0;
  showSlide{i}();
  clearInterval({interval_var});
  {interval_var} = setInterval(() => {{
    {index_var} = ({index_var} + 1) % {array_name}.length;
    showSlide{i}();
  }}, 500);
}}

function closeModal(modalId, intervalName) {{
  document.getElementById(modalId).style.display = "none";
  document.body.style.overflow = "";  // restore scrolling
  clearInterval(window[intervalName]);
}}
</script>
'))
}
```

:::
:::




::: gallery

<h3 style="margin: 0; line-height: 1.2; text-align: center;">Photo Bombs (깜짝 사진)</h3>


<p align="center" style="margin-top: 25px;">
Click on a photo to view the animation.
</p>
<p align="center" style="margin-bottom: 25px;">
사진을 클릭하면 애니메이션이 재생됩니다.
</p>


::: column-page


```{r, results='asis', echo=FALSE, warning=FALSE, message=FALSE}
library(glue)

for (i in 2:9) {
  folder <- glue("../photos/gif{i}")
  images <- list.files(folder, pattern = "\\.jpg$", full.names = TRUE)
  if (length(images) == 0) next

  img_id <- glue("slide{i}")
  modal_id <- glue("modal{i}")
  modal_img_id <- glue("modalImg{i}")
  array_name <- glue("imagePaths{i}")
  index_var <- glue("currentIndex{i}")
  interval_var <- glue("interval{i}")

  cat(glue('
<div>
  <img id="{img_id}" src="{images[1]}" class="aligned-image nolightbox" style="cursor:pointer;" onclick="openModal{i}()">
</div>

<div id="{modal_id}" class="modal">
  <span class="modal-close" onclick="closeModal(\'{modal_id}\', \'{interval_var}\')">&times;</span>
  <img class="modal-content" id="{modal_img_id}">
</div>
'))

  js_array <- paste0('"', images, '"', collapse = ",\n")

cat(glue('
<script>
const {array_name} = [
{js_array}
];
let {index_var} = 0;
let {interval_var} = null;

function showSlide{i}() {{
  const modalImg = document.getElementById("{modal_img_id}");
  modalImg.src = {array_name}[{index_var}];
}}

function openModal{i}() {{
  const modal = document.getElementById("{modal_id}");
  modal.style.display = "block";
  document.body.style.overflow = "hidden";  // prevent background scroll
  {index_var} = 0;
  showSlide{i}();
  clearInterval({interval_var});
  {interval_var} = setInterval(() => {{
    {index_var} = ({index_var} + 1) % {array_name}.length;
    showSlide{i}();
  }}, 500);
}}

function closeModal(modalId, intervalName) {{
  document.getElementById(modalId).style.display = "none";
  document.body.style.overflow = "";  // restore scrolling
  clearInterval(window[intervalName]);
}}
</script>
'))
}
```

:::
:::


::: gallery

<h3 style="margin: 0; line-height: 1.2; text-align: center;">Reception Photos (연회 사진)</h3>


::: column-page

```{r, results='asis', echo=FALSE, warning=FALSE, message=FALSE}
library(glue)
library(fs)
library(here)
album = rmarkdown::metadata$album
localurl =  path('../photos/', album)
# photos = fs::dir_ls(path = localurl, glob = '*.jpg')

# List .jpg and .gif files
jpg_files <- fs::dir_ls(path = localurl, glob = '*.jpg')
gif_files <- fs::dir_ls(path = localurl, glob = '*.png')

# Combine and sort
photos <- sort(c(jpg_files, gif_files))

# baseurl = glue('https://xxxxxxx.cloudfront.net/photos/{album}')
baseurl = localurl
if(file.exists('custom_order')){
reordering = intersect(as.integer(readLines('custom_order')), seq_along(photos))
photos = photos[reordering]
}
  
for (i in seq_along(photos)){
  if(i %in% c(1)) span = 'all' else span = 'none'

  cat(glue('![]({{ baseurl }}/{{ fs::path_file(photos[i]) }}){.lightbox style="column-span: {{ span }};" group="reception"}', .open = '{{', .close = '}}'), '
')

}
```
:::

:::




